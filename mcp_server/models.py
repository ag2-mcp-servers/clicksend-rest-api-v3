# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:09:39+00:00

from __future__ import annotations

from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class AcceptableImportFields(RootModel[Any]):
    root: Any


class AccountActivation(RootModel[Any]):
    root: Any


class AccountCollection(RootModel[Any]):
    root: Any


class AllowedFromEmailAddresses(RootModel[Any]):
    root: Any


class BuyDedicatedNumber(RootModel[Any]):
    root: Any


class CSVImportFilePreview(RootModel[Any]):
    root: Any


class CalculatePrice(RootModel[Any]):
    root: Any


class CalculatePriceForSMSCampaign(RootModel[Any]):
    root: Any


class CalculatePricing(RootModel[Any]):
    root: Any


class CancelScheduledMessages(RootModel[Any]):
    root: Any


class CancelVoiceCalls(RootModel[Any]):
    root: Any


class Contact(RootModel[Any]):
    root: Any


class ContactCollection(RootModel[Any]):
    root: Any


class ContactList(RootModel[Any]):
    root: Any


class ContactListCollection(RootModel[Any]):
    root: Any


class ContactSuggestions(RootModel[Any]):
    root: Any


class CountryCollection(RootModel[Any]):
    root: Any


class CreateSMSCampaign(RootModel[Any]):
    root: Any


class CreditCardInfo(RootModel[Any]):
    root: Any


class DeliveryIssues(RootModel[Any]):
    root: Any


class DeliveryReceipts(RootModel[Any]):
    root: Any


class DetectAddress(RootModel[Any]):
    root: Any


class DirectMailCampaign(RootModel[Any]):
    root: Any


class EmailToSMSAllowedAddress(RootModel[Any]):
    root: Any


class EmailToSMSAllowedAddressObject(RootModel[Any]):
    root: Any


class EmailCampaigns(RootModel[Any]):
    root: Any


class EmailDeliveryReceiptRules(RootModel[Any]):
    root: Any


class ExistingSMSCampaigns(RootModel[Any]):
    root: Any


class ExportContacts(RootModel[Any]):
    root: Any


class ExportPostLetterHistory(RootModel[Any]):
    root: Any


class ExportPostcardHistory(RootModel[Any]):
    root: Any


class FaxDeliveryReceiptRules(RootModel[Any]):
    root: Any


class FaxHistory(RootModel[Any]):
    root: Any


class ForgotPassword(RootModel[Any]):
    root: Any


class ForgotUsername(RootModel[Any]):
    root: Any


class GetCountryPricing(RootModel[Any]):
    root: Any


class GetPostLetterHistory(RootModel[Any]):
    root: Any


class GetPostcardHistory(RootModel[Any]):
    root: Any


class GetSMSStatistics(RootModel[Any]):
    root: Any


class GetVoiceStatistics(RootModel[Any]):
    root: Any


class GetAllDedicatedNumbers(RootModel[Any]):
    root: Any


class ImportContacts(RootModel[Any]):
    root: Any


class InboundFaxRules(RootModel[Any]):
    root: Any


class InboundMMS(RootModel[Any]):
    root: Any


class InboundSMS(RootModel[Any]):
    root: Any


class InboundSMSRules(RootModel[Any]):
    root: Any


class MMSHistory(RootModel[Any]):
    root: Any


class MasterTemplateCategories(RootModel[Any]):
    root: Any


class MasterTemplates(RootModel[Any]):
    root: Any


class PostCodeSearch(RootModel[Any]):
    root: Any


class PostReturnAddress(RootModel[Any]):
    root: Any


class ReferralAccounts(RootModel[Any]):
    root: Any


class RemoveDuplicateContacts(RootModel[Any]):
    root: Any


class RemoveOptedOutContacts(RootModel[Any]):
    root: Any


class Reseller(RootModel[Any]):
    root: Any


class ResellerAccount(RootModel[Any]):
    root: Any


class ResellerAccounts(RootModel[Any]):
    root: Any


class ResellerSubdomain(RootModel[Any]):
    root: Any


class SDKDownload(RootModel[Any]):
    root: Any


class SMSDeliveryReceiptRules(RootModel[Any]):
    root: Any


class SMSHistory(RootModel[Any]):
    root: Any


class SearchContactsLists(RootModel[Any]):
    root: Any


class SearchDedicatedNumbersByCountry(RootModel[Any]):
    root: Any


class SendFax(RootModel[Any]):
    root: Any


class SendPostLetter(RootModel[Any]):
    root: Any


class SendPostcard(RootModel[Any]):
    root: Any


class SendAVoiceCallTextToSpeech(RootModel[Any]):
    root: Any


class SendAnMMS(RootModel[Any]):
    root: Any


class SendAnSMS(RootModel[Any]):
    root: Any


class StrippedStrings(RootModel[Any]):
    root: Any


class Subaccount(RootModel[Any]):
    root: Any


class SubaccountCollection(RootModel[Any]):
    root: Any


class Templates(RootModel[Any]):
    root: Any


class Timezones(RootModel[Any]):
    root: Any


class TransactionalEmail(RootModel[Any]):
    root: Any


class TransferContact(RootModel[Any]):
    root: Any


class URLShortening(RootModel[Any]):
    root: Any


class UploadImage(RootModel[Any]):
    root: Any


class UploadAFile(RootModel[Any]):
    root: Any


class UserEmailTemplates(RootModel[Any]):
    root: Any


class VerifyForgotPassword(RootModel[Any]):
    root: Any


class VoiceDeliveryReceiptRules(RootModel[Any]):
    root: Any


class VoiceHistory(RootModel[Any]):
    root: Any


class VoiceLanguages(RootModel[Any]):
    root: Any


class AccountPostRequest(BaseModel):
    account_name: str = Field(..., description='Your delivery to value.')
    country: str = Field(..., description='Your country.')
    password: str = Field(..., description='Your password.')
    user_email: str = Field(..., description='Your email.')
    user_first_name: str = Field(..., description='Your first name.')
    user_last_name: str = Field(..., description='Your last name.')
    user_phone: str = Field(..., description='Your phone number in E.164 format.')
    username: str = Field(..., description='Your username.')


class AccountPutRequest(BaseModel):
    account_name: str = Field(..., description='Your delivery to value.')
    country: str = Field(..., description='Your country.')
    password: str = Field(..., description='Your password.')
    private_uploads: Optional[float] = Field(
        None, description='Set the private uploads flag. 0 or 1 only.'
    )
    setting_sms_hide_business_name: Optional[float] = Field(
        None, description='Set the private uploads flag. 0 or 1 only.'
    )
    setting_sms_hide_your_number: Optional[float] = Field(
        None, description='Set the private uploads flag. 0 or 1 only.'
    )
    timezone: str = Field(..., description='Timezone.')
    user_email: str = Field(..., description='Your email.')
    user_first_name: str = Field(..., description='Your first name.')
    user_last_name: str = Field(..., description='Your last name.')
    user_phone: str = Field(..., description='Your phone number in E.164 format.')
    username: str = Field(..., description='Your username.')


class AccountVerifySendPutRequest(BaseModel):
    country: Optional[str] = None
    type: Optional[str] = None
    user_phone: Optional[str] = None


class AutomationsEmailReceiptPostRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    enabled: float = Field(..., description='Enabled.')
    match_type: float = Field(..., description='Match Type. 0=All reports.')
    rule_name: str = Field(..., description='Rule Name.')


class AutomationsEmailReceiptRuleIdPutRequest(BaseModel):
    action: Optional[str] = Field(None, description='Action.')
    action_address: Optional[str] = Field(None, description='Action Address.')
    enabled: Optional[float] = Field(None, description='Enabled.')
    match_type: Optional[float] = Field(None, description='Match Type. 0=All reports.')
    rule_name: Optional[str] = Field(None, description='Rule Name.')


class AutomationsFaxInboundPostRequest(BaseModel):
    action: str = Field(..., description='Action')
    action_address: str = Field(..., description='Action Address')
    dedicated_number: str = Field(..., description='Decicated Number')
    enabled: float = Field(..., description='Enable')
    rule_name: str = Field(..., description='Rule Name')


class AutomationsFaxInboundInboundRuleIdPutRequest(BaseModel):
    action: str = Field(..., description='Action')
    action_address: str = Field(..., description='Action Address')
    dedicated_number: str = Field(..., description='Decicated Number')
    enabled: float = Field(..., description='Enable')
    rule_name: str = Field(..., description='Rule Name')


class AutomationsFaxReceiptsPostRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    enabled: float = Field(..., description='Enabled.')
    match_type: float = Field(..., description='Match Type. 0=All reports.')
    rule_name: str = Field(..., description='Rule Name.')


class AutomationsFaxReceiptsRuleIdPutRequest(BaseModel):
    action: Optional[str] = Field(None, description='Action.')
    action_address: Optional[str] = Field(None, description='Action Address.')
    enabled: Optional[float] = Field(None, description='Enabled.')
    match_type: Optional[float] = Field(None, description='Match Type. 0=All reports.')
    rule_name: Optional[str] = Field(None, description='Rule Name.')


class AutomationsSmsInboundPostRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    dedicated_number: float = Field(..., description='Dedicated Number.')
    enabled: float = Field(..., description='Enabled.')
    message_search_term: str = Field(..., description='Message Search Term.')
    message_search_type: float = Field(
        ...,
        description='Message Search Type: 0=Any message, 1=starts with, 2=contains, 3=does not contain.',
    )
    rule_name: str = Field(..., description='Rule Name.')


class AutomationsSmsInboundInboundRuleIdPutRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    dedicated_number: str = Field(..., description='Dedicated Number')
    enabled: float = Field(..., description='Enabled.')
    message_search_term: str = Field(..., description='Message Search Term.')
    message_search_type: float = Field(
        ...,
        description='Message Search Type: 0=Any message, 1=starts with, 2=contains, 3=does not contain.',
    )


class AutomationsSmsReceiptsPostRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    enabled: float = Field(..., description='Enabled.')
    match_type: float = Field(
        ..., description='Match Type. 0=All reports, 1=Only failed, 2=Only successful.'
    )
    rule_name: str = Field(..., description='Rule Name.')


class AutomationsSmsReceiptsReceiptRuleIdPutRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    enabled: float = Field(..., description='Enabled.')
    match_type: float = Field(
        ..., description='Match Type. 0=All reports, 1=Only failed, 2=Only successful.'
    )
    rule_name: str = Field(..., description='Rule Name.')


class AutomationsVoiceReceiptsPostRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    enabled: float = Field(..., description='Enabled.')
    match_type: float = Field(
        ..., description='Match Type. 0=All reports, 1=Only failed, 2=Only successful.'
    )
    rule_name: str = Field(..., description='Rule Name.')


class AutomationsVoiceReceiptsReceiptRuleIdPutRequest(BaseModel):
    action: str = Field(..., description='Action.')
    action_address: str = Field(..., description='Action Address.')
    enabled: float = Field(..., description='Enabled.')
    match_type: float = Field(
        ..., description='Match Type. 0=All reports, 1=Only failed, 2=Only successful.'
    )
    rule_name: str = Field(..., description='Rule Name.')


class DeliveryIssuesPostRequest(BaseModel):
    client_comments: Optional[str] = Field(None, description="The user's comments.")
    description: str = Field(..., description='The description of the message.')
    email_address: str = Field(..., description="The user's email address.")
    message_id: str = Field(..., description='The message id of the message.')
    type: str = Field(
        ...,
        description='The type of message, must be one of the following values: `SMS`, `MMS`, `VOICE`, `EMAIL_MARKETING`, `EMAIL_TRANSACTIONAL`, `FAX`, `POST`.',
    )


class EmailCampaignsPricePostRequest(BaseModel):
    from_email_address_id: float = Field(
        ..., description='The allowed email address id.'
    )
    from_name: str = Field(..., description='The name that will appear on the email.')
    list_id: float = Field(..., description='The list id you want to access.')
    name: str = Field(..., description='The name of the sender.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    subject: str = Field(..., description='The subject of the email campaign.')
    template_id: float = Field(..., description='The template id you want to use.')


class EmailCampaignsSendPostRequest(BaseModel):
    from_email_address_id: float = Field(
        ..., description='The allowed email address id.'
    )
    from_name: str = Field(..., description='The name that will appear on the email.')
    list_id: float = Field(..., description='The list id you want to access.')
    name: str = Field(..., description='The name of the sender.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    subject: str = Field(..., description='The subject of the email campaign.')
    template_id: float = Field(..., description='The template id you want to use.')


class EmailCampaignsEmailCampaignIdPutRequest(BaseModel):
    from_email_address_id: Optional[float] = Field(
        None, description='The allowed email address id.'
    )
    from_name: Optional[str] = Field(
        None, description='The name that will appear on the email.'
    )
    list_id: Optional[float] = Field(
        None, description='The list id you want to access.'
    )
    name: Optional[str] = Field(None, description='The name of the sender.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Will replace existing schedule (even if left blank). Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    subject: Optional[str] = Field(
        None, description='The subject of the email campaign.'
    )
    template_id: Optional[float] = Field(
        None, description='The template id you want to use.'
    )


class EmailAddressesPostRequest(BaseModel):
    Body: Optional[str] = Field(
        None, description='{\n    "email_address" : "test222@user.com"\n}'
    )
    email_address: str = Field(..., description='Your email.')


class EmailPricePostRequest(BaseModel):
    attachments: List = Field(
        ...,
        description='The attachments of the email. See sample request for more details.',
    )
    bcc: Optional[List] = Field(
        None, description='The bcc of the email. See sample request for more details.'
    )
    body: str = Field(..., description='The content of the email.')
    cc: Optional[List] = Field(
        None, description='The cc of the email. See sample request for more details.'
    )
    from_email_address_id: float = Field(
        ..., alias='from.email_address_id', description="The sender's email address id."
    )
    from_name: Optional[str] = Field(
        None, alias='from.name', description="The sender's name."
    )
    subject: str = Field(..., description='The subject of the email.')
    to: List = Field(
        ...,
        description='The recipients of the email. See sample request for more details.',
    )


class EmailReceiptsPostRequest(BaseModel):
    url: str = Field(
        ...,
        description="Your URL if using the push option or 'poll' if using the pull option.",
    )


class EmailSendPostRequest(BaseModel):
    attachments: Optional[List] = Field(
        None, description='The attachments of the email.'
    )
    bcc: Optional[List] = Field(
        None, description='The bcc of the email. Follows the same structure as `to`.'
    )
    body: str = Field(..., description='The content of the email.')
    cc: Optional[List] = Field(
        None, description='The cc of the email. Follows the same structure as `to`.'
    )
    from_email_address_id: float = Field(
        ..., alias='from.email_address_id', description="The sender's email address ID."
    )
    from_name: Optional[str] = Field(
        None, alias='from.name', description="The sender's name."
    )
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    to: List = Field(..., description='The recipients of the email.')


class EmailTemplatesPostRequest(BaseModel):
    template_id_master: float = Field(
        ..., description='The ID of the master template you want to base on.'
    )
    template_name: str = Field(
        ..., description='The intended name for the new template.'
    )


class EmailTemplatesImagesTemplateIdPostRequest(BaseModel):
    image: Optional[str] = Field(None, description='Uploads your selected image file.')
    url: Optional[str] = Field(
        None, description='Uploads the image from the supplied URL.'
    )


class EmailTemplatesTemplateIdPutRequest(BaseModel):
    body: str = Field(..., description='Your template body.')
    template_name: str = Field(
        ..., description='The intended name for the new template.'
    )


class FaxPricePostRequest(BaseModel):
    country: Optional[str] = Field(None, description='Recipient country.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    file_url: str = Field(..., description='Your URL to your PDF file.')
    from_: Optional[str] = Field(
        None, alias='from', description='Your sender id. Must be a valid fax number.'
    )
    from_email: Optional[str] = Field(
        None, description='An email address where the reply should be emailed to.'
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'.",
    )
    messages: List = Field(..., description='Your messages.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )


class FaxReceiptsPostRequest(BaseModel):
    url: str = Field(
        ...,
        description="Your URL if using the push option or 'poll' if using the pull option.",
    )


class FaxReceiptsReadPutRequest(BaseModel):
    date_before: Optional[float] = Field(
        None,
        description='An optional [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp) - mark all as read before this timestamp. If not given, all receipts will be marked as read.',
    )


class FaxSendPostRequest(BaseModel):
    country: Optional[str] = Field(None, description='Recipient country.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    file_url: str = Field(..., description='Your URL to your PDF file.')
    from_: Optional[str] = Field(
        None, alias='from', description='Your sender id. Must be a valid fax number.'
    )
    from_email: Optional[str] = Field(
        None, description='An email address where the reply should be emailed to.'
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'.",
    )
    messages: List = Field(..., description='Your messages.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )


class ForgotPasswordPutRequest(BaseModel):
    username: str = Field(..., description='Your username.')


class ForgotPasswordVerifyPutRequest(BaseModel):
    activation_token: str = Field(..., description='Your email activation token.')
    password: str = Field(..., description='Your new password.')
    subaccount_id: float = Field(..., description='Your subaccount id.')


class ForgotUsernamePutRequest(BaseModel):
    country: Optional[str] = Field(
        None,
        description='Your country. Used to format phone number. This is required if phone_number is not in international-format.',
    )
    email: Optional[str] = Field(
        None, description='Your email. This is required if phone_number is not present.'
    )
    phone_number: Optional[float] = Field(
        None, description='Your phone number. This is required if email is not present.'
    )


class ListsPostRequest(BaseModel):
    list_name: str = Field(..., description='Your contact list name.')


class ListsListIdPutRequest(BaseModel):
    list_name: Optional[str] = Field(None, description='Your new contact list name.')


class ListsListIdContactsPostRequest(BaseModel):
    address_city: Optional[str] = Field(None, description='Contact city.')
    address_country: Optional[str] = Field(
        None, description='Contact two-letter country code defined in ISO 3166.'
    )
    address_line_1: Optional[str] = Field(None, description='Contact address line 1.')
    address_line_2: Optional[str] = Field(None, description='Contact address line 2.')
    address_postal_code: Optional[str] = Field(None, description='Contact postal code.')
    address_state: Optional[str] = Field(None, description='Contact state.')
    custom_1: Optional[str] = Field(None, description='Contact custom 1 text.')
    custom_2: Optional[str] = Field(None, description='Contact custom 2 text.')
    custom_3: Optional[str] = Field(None, description='Contact custom 3 text.')
    custom_4: Optional[str] = Field(None, description='Contact custom 4 text.')
    email: Optional[str] = Field(None, description='Contact email.')
    fax_number: Optional[str] = Field(None, description='Contact fax number.')
    first_name: Optional[str] = Field(None, description='Contact firstname.')
    last_name: Optional[str] = Field(None, description='Contact lastname.')
    organization_name: Optional[str] = Field(
        None, description='Your organization name.'
    )
    phone_number: str = Field(..., description='Contact phone number in E.164 format.')


class ListsListIdContactsContactIdPutRequest(BaseModel):
    address_city: Optional[str] = Field(None, description='Contact city.')
    address_country: Optional[str] = Field(
        None, description='Contact two-letter country code defined in ISO 3166.'
    )
    address_line_1: Optional[str] = Field(None, description='Contact address line 1.')
    address_line_2: Optional[str] = Field(None, description='Contact address line 2.')
    address_postal_code: Optional[str] = Field(None, description='Contact postal code.')
    address_state: Optional[str] = Field(None, description='Contact state.')
    custom_1: Optional[str] = Field(None, description='Contact custom 1 text.')
    custom_2: Optional[str] = Field(None, description='Contact custom 2 text.')
    custom_3: Optional[str] = Field(None, description='Contact custom 3 text.')
    custom_4: Optional[str] = Field(None, description='Contact custom 4 text.')
    email: Optional[str] = Field(None, description='Contact email.')
    fax_number: Optional[str] = Field(None, description='Contact fax number.')
    first_name: Optional[str] = Field(None, description='Contact firstname.')
    last_name: Optional[str] = Field(None, description='Contact lastname.')
    organization_name: Optional[str] = Field(
        None, description='Contact organization name.'
    )
    phone_number: Optional[str] = Field(
        None, description='Contact phone number in E.164 format.'
    )


class ListsListIdImportPostRequest(BaseModel):
    field_order: List = Field(
        ..., description='Your field order for your contact import file.'
    )
    file_url: str = Field(..., description='Path to your CSV import file.')


class ListsListIdImportCsvPreviewPostRequest(BaseModel):
    file_url: str = Field(..., description='Path to your CSV import file.')


class ListsListIdRemoveDuplicatesPutRequest(BaseModel):
    fields: List = Field(
        ..., description="List of Contact's fields to be used for checking."
    )


class MmsPricePostRequest(BaseModel):
    body: str = Field(..., description='Your message.')
    country: Optional[str] = Field(None, description='Recipient country.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )
    from_email: Optional[str] = Field(
        None,
        description='An email address where the reply should be emailed to. If omitted, the reply will be emailed back to the user who sent the outgoing SMS.',
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'.",
    )
    media_file: str = Field(..., description='Media file you want to send.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    subject: str = Field(..., description='Subject line. Maximum 20 characters.')
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )


class MmsSendPostRequest(BaseModel):
    body: str = Field(..., description='Your message.')
    country: Optional[str] = Field(None, description='Recipient country.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The number to send from. Either leave blank or use a ClickSend number only.',
    )
    from_email: Optional[str] = Field(
        None,
        description='An email address where the reply should be emailed to. If omitted, the reply will be emailed back to the user who sent the outgoing SMS.',
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'.",
    )
    media_file: str = Field(..., description='Media file you want to send.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    subject: str = Field(..., description='Subject line. Maximum 20 characters.')
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )


class PostDirectMailCampaignsPricePostRequest(BaseModel):
    areas: Optional[List] = Field(
        None,
        description='List of location where you want to send your campaign, and the quantity per location.',
    )
    file_urls: List = Field(
        ..., description='Campaign file urls. You can submit max 2 file urls.'
    )
    name: str = Field(..., description='Campaign name.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    size: str = Field(..., description='Campaign file size. It can be A5 or DL.')
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )


class PostDirectMailCampaignsSendPostRequest(BaseModel):
    areas: Optional[List] = Field(
        None,
        description='List of location where you want to send your campaign, and the quantity per location.',
    )
    file_urls: List = Field(
        ..., description='Campaign file urls. You can submit max 2 file urls.'
    )
    name: str = Field(..., description='Campaign name.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    size: str = Field(..., description='Campaign file size. It can be A5 or DL.')
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )


class PostLettersDetectAddressPostRequest1(BaseModel):
    content: str = Field(..., description='Your file contents encoded in `base64`.')


class PostLettersDetectAddressPostRequest2(BaseModel):
    address: str = Field(..., description='Your file contents encoded in `base64`.')


class PostLettersDetectAddressPostRequest(
    RootModel[
        Union[
            PostLettersDetectAddressPostRequest1, PostLettersDetectAddressPostRequest2
        ]
    ]
):
    root: Union[
        PostLettersDetectAddressPostRequest1, PostLettersDetectAddressPostRequest2
    ]


class PostLettersPricePostRequest(BaseModel):
    colour: Optional[float] = Field(None, description='Is it in colored?')
    duplex: Optional[float] = Field(None, description='Is it in duplex?')
    file_url: str = Field(..., description='Your URL to your PDF file.')
    priority_post: Optional[float] = Field(
        None, description='Is it priority? 0 = Not Priority, 1 = Priority.'
    )
    recipients: Optional[List] = Field(None, description='Your recipients.')
    template_used: Optional[float] = Field(
        None,
        description='Whether you used our template or not ([More Info](http://help.clicksend.com/13996-Post/post-letter-template)).',
    )


class PostLettersSendPostRequest(BaseModel):
    colour: Optional[float] = Field(
        None, description='Is it in colour? 0 = Black and White, 1 = Colour.'
    )
    duplex: Optional[float] = Field(
        None, description='Is it in duplex? 0 = Simplex, 1 = Duplex.'
    )
    file_url: str = Field(..., description='Your URL to your PDF file.')
    priority_post: Optional[float] = Field(
        None, description='Is it priority? 0 = Not Priority, 1 = Priority.'
    )
    recipients: Optional[List] = Field(None, description='Your recipients.')
    template_used: Optional[float] = Field(
        None,
        description='Whether you used our template or not ([More Info](http://help.clicksend.com/13996-Post/post-letter-template)).',
    )


class PostPostcardsPricePostRequest(BaseModel):
    file_urls: List = Field(
        ..., description='Postcard file urls. You can submit max 2 file urls.'
    )
    recipients: List = Field(..., description='Your recipients.')


class PostPostcardsSendPostRequest(BaseModel):
    file_urls: List = Field(
        ..., description='Postcard file urls. You can submit max 2 file urls.'
    )
    recipients: List = Field(..., description='Your recipients.')


class PostReturnAddressesPostRequest(BaseModel):
    address_city: str = Field(..., description='Your address city.')
    address_country: str = Field(
        ..., description='Two-letter country code defined in ISO 3166.'
    )
    address_line_1: str = Field(..., description='Your address line 1.')
    address_line_2: Optional[str] = Field(None, description='Your address line 2.')
    address_name: str = Field(..., description='Your address name.')
    address_postal_code: float = Field(..., description='Your address postal code.')
    address_state: str = Field(..., description='Your address state.')


class PostReturnAddressesReturnAddressIdPutRequest(BaseModel):
    address_city: str = Field(..., description='Your address city.')
    address_country: str = Field(
        ..., description='Two-letter country code defined in ISO 3166.'
    )
    address_line_1: str = Field(..., description='Your address line 1.')
    address_line_2: Optional[str] = Field(None, description='Your address line 2.')
    address_name: str = Field(..., description='Your address name.')
    address_postal_code: float = Field(..., description='Your address postal code.')
    address_state: str = Field(..., description='Your address state.')


class RechargeCreditCardPutRequest(BaseModel):
    bank_name: str = Field(
        ..., description="Your bank's name that issued the credit card."
    )
    cvc: float = Field(..., description='Your CVC digits.')
    expiry_month: float = Field(..., description='Your credit card expiry month.')
    expiry_year: Optional[float] = Field(
        None, description='Your credit card expiry year.'
    )
    name: str = Field(..., description='Your name.')
    number: Optional[float] = Field(None, description='Your credit card no.')


class ResellerPutRequest(BaseModel):
    allow_public_signups: float = Field(..., description='Allow public signups.')
    colour_navigation: str = Field(..., description='Colour navigation.')
    company_name: str = Field(..., description='Company name.')
    default_margin: float = Field(..., description='Default margin.')
    default_margin_numbers: float = Field(..., description='Default margin numbers.')
    logo_url_dark: str = Field(..., description='Logo URL (dark)')
    logo_url_light: str = Field(..., description='Logo URL (light)')
    subdomain: str = Field(..., description='Subdomain.')
    trial_balance: float = Field(..., description='Trial balance.')


class ResellerAccountsPostRequest(BaseModel):
    account_name: str = Field(..., description='Your delivery to value.')
    country: str = Field(..., description='Client country.')
    password: str = Field(..., description='Your password.')
    user_email: str = Field(..., description='Your email.')
    user_first_name: str = Field(..., description='Your first name.')
    user_last_name: str = Field(..., description='Your last name.')
    user_phone: str = Field(..., description='Your phone number in E.164 format.')
    username: str = Field(..., description='Your username.')


class ResellerAccountsPublicPostRequest(BaseModel):
    account_name: str = Field(..., description='Your delivery to value.')
    country: str = Field(..., description='Client country.')
    password: str = Field(..., description='Your password.')
    reseller_user_id: float = Field(..., description='Reseller User ID.')
    user_email: str = Field(..., description='Your email.')
    user_first_name: str = Field(..., description='Your first name.')
    user_last_name: str = Field(..., description='Your last name.')
    user_phone: str = Field(..., description='Your phone number in E.164 format.')
    username: str = Field(..., description='Your username.')


class ResellerAccountsClientUserIdPutRequest(BaseModel):
    account_name: str = Field(..., description='Your delivery to value.')
    country: str = Field(..., description='Client country.')
    password: str = Field(..., description='Your password.')
    user_email: str = Field(..., description='Your email.')
    user_first_name: str = Field(..., description='Your first name.')
    user_last_name: str = Field(..., description='Your last name.')
    user_phone: str = Field(..., description='Your phone number in E.164 format.')
    username: str = Field(..., description='Your username.')


class ResellerTransferCreditPutRequest(BaseModel):
    balance: float = Field(..., description='Your amount.')
    client_user_id: str = Field(..., description='Your client user id.')
    currency: str = Field(..., description='Your currency.')


class SmsCampaignsPricePostRequest(BaseModel):
    body: str = Field(..., description='Your campaign message.')
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )
    list_id: float = Field(..., description='Your list id.')
    name: str = Field(..., description='Your campaign name.')


class SmsCampaignsSendPostRequest(BaseModel):
    body: str = Field(..., description='Your campaign message.')
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )
    list_id: float = Field(..., description='Your list id.')
    name: str = Field(..., description='Your campaign name.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    url_to_shorten: str = Field(
        ...,
        description='The URL you want to shorten (only required when using this feature). This must be only `http` or `https`.',
    )


class SmsCampaignsSmsCampaignIdPutRequest(BaseModel):
    body: str = Field(..., description='Your campaign message.')
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )
    list_id: float = Field(..., description='Your list id.')
    name: str = Field(..., description='Your campaign name.')
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Will replace existing schedule (even if left blank). Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )


class SmsEmailSmsPostRequest(BaseModel):
    email_address: str = Field(..., description='Your email address.')
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )


class SmsEmailSmsStrippedStringsPostRequest(BaseModel):
    strip_string: str = Field(
        ..., description='The string that you want to strip from the body of email.'
    )


class SmsEmailSmsStrippedStringsRuleIdPutRequest(BaseModel):
    strip_string: Optional[str] = Field(
        None, description='The string that you want to strip from the body of email.'
    )


class SmsEmailSmsEmailAddressIdPutRequest(BaseModel):
    email_address: str = Field(..., description='Your email address.')
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )


class SmsInboundPostRequest(BaseModel):
    url: str = Field(
        ...,
        description="Your URL if using the push option or 'poll' if using the pull option.",
    )


class SmsInboundReadPutRequest(BaseModel):
    date_before: float = Field(
        ...,
        description='An optional timestamp - mark all as read before this timestamp. If not given, all messages will be marked as read.',
    )


class SmsPricePostRequest(BaseModel):
    body: str = Field(..., description='Your message.')
    country: Optional[str] = Field(None, description='Recipient country.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'.",
    )
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )


class SmsReceiptsPostRequest(BaseModel):
    url: str = Field(
        ...,
        description="Your URL if using the push option or 'poll' if using the pull option.",
    )


class SmsReceiptsReadPutRequest(BaseModel):
    date_before: Optional[float] = Field(
        None,
        description='An optional timestamp - mark all as read before this timestamp. If not given, all receipts will be marked as read.',
    )


class SmsSendPostRequest(BaseModel):
    body: str = Field(..., description='Your message.')
    country: Optional[str] = Field(None, description='Recipient country.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Your sender id - [more info](http://help.clicksend.com/SMS/what-is-a-sender-id-or-sender-number).',
    )
    from_email: Optional[str] = Field(
        None,
        description='An email address where the reply should be emailed to. If omitted, the reply will be emailed back to the user who sent the outgoing SMS.',
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'.",
    )
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )


class SmsTemplatesPostRequest(BaseModel):
    body: str = Field(..., description='Your template body.')
    template_name: str = Field(..., description='Your template name.')


class SmsTemplatesTemplateIdPutRequest(BaseModel):
    body: str = Field(..., description='Your template body.')
    template_name: str = Field(..., description='Your template name.')


class SubaccountsPostRequest(BaseModel):
    access_billing: Optional[float] = Field(
        None, description='Your access billing flag value, must be 1 or 0.'
    )
    access_contacts: Optional[float] = Field(
        None, description='Your access contacts flag value, must be 1 or 0.'
    )
    access_reporting: Optional[float] = Field(
        None, description='Your access reporting flag value, must be 1 or 0.'
    )
    access_settings: Optional[float] = Field(
        None, description='Your access settings flag value, must be 1 or 0.'
    )
    access_users: Optional[float] = Field(
        None, description='Your access users flag value, must be 1 or 0.'
    )
    api_username: str = Field(..., description='Your new api username.')
    email: str = Field(..., description='Your new email.')
    first_name: str = Field(..., description='Your firstname.')
    last_name: str = Field(..., description='Your lastname.')
    password: str = Field(..., description='Your new password.')
    phone_number: str = Field(..., description='Your phone number in E.164 format.')
    share_campaigns: Optional[float] = Field(
        None, description='Your share campaigns flag value, must be 1 or 0.'
    )


class SubaccountsSubaccountIdPutRequest(BaseModel):
    access_billing: Optional[float] = Field(
        None, description='Your access billing flag value, must be 1 or 0.'
    )
    access_contacts: Optional[float] = Field(
        None, description='Your access contacts flag value, must be 1 or 0.'
    )
    access_reporting: Optional[float] = Field(
        None, description='Your access reporting flag value, must be 1 or 0.'
    )
    access_settings: Optional[float] = Field(
        None, description='Your access settings flag value, must be 1 or 0.'
    )
    access_users: Optional[float] = Field(
        None, description='Your access users flag value, must be 1 or 0.'
    )
    email: Optional[str] = Field(None, description='Your new email.')
    first_name: Optional[str] = Field(None, description='Your firstname.')
    last_name: Optional[str] = Field(None, description='Your lastname.')
    password: Optional[str] = Field(None, description='Your new password.')
    phone_number: Optional[str] = Field(
        None, description='Your phone number in E.164 format.'
    )
    share_campaigns: Optional[float] = Field(
        None, description='Your share campaigns flag value, must be 1 or 0.'
    )


class UploadsConvertConvertPostRequest1(BaseModel):
    content: str = Field(..., description='Your file contents encoded in `base64`.')
    convert: str = Field(
        ..., description='Conversion type: `fax`, `mms`, `csv` or `post`'
    )


class UploadsConvertConvertPostRequest2(BaseModel):
    convert: str = Field(
        ..., description='Conversion type: `fax`, `mms`, `csv` or `post`'
    )
    file: str = Field(..., description='Your file.')


class UploadsConvertConvertPostRequest(
    RootModel[
        Union[UploadsConvertConvertPostRequest1, UploadsConvertConvertPostRequest2]
    ]
):
    root: Union[UploadsConvertConvertPostRequest1, UploadsConvertConvertPostRequest2]


class VoicePricePostRequest(BaseModel):
    body: str = Field(..., description='Your message.')
    country: Optional[str] = Field(None, description='The country of the recipient.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    lang: Optional[str] = Field(
        None, description='au (string, required) - See section on available languages.'
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'.",
    )
    require_input: Optional[float] = Field(
        None,
        description='Whether you want to receive a keypress from the call recipient (1 for on, 0 [default] for off)',
    )
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )
    voice: str = Field(..., description="Either 'female' or 'male'.")


class VoiceReceiptsPostRequest(BaseModel):
    url: str = Field(
        ...,
        description="Your URL if using the push option or 'poll' if using the pull option.",
    )


class VoiceSendPostRequest(BaseModel):
    body: str = Field(..., description='Your message.')
    country: Optional[str] = Field(None, description='The country of the recipient.')
    custom_string: Optional[str] = Field(
        None,
        description='Your reference. Will be passed back with all replies and delivery reports.',
    )
    lang: Optional[str] = Field(
        None, description='au (string, required) - See section on available languages.'
    )
    list_id: Optional[float] = Field(
        None,
        description="Your list ID if sending to a whole list. Can be used instead of 'to'. Will override 'to' if both are used.",
    )
    machine_detection: Optional[float] = Field(
        None,
        description='Whether to attempt to detect an answering machine or voicemail service and leave a message (1 for on, 0 [default] for off)',
    )
    require_input: Optional[float] = Field(
        None,
        description='Whether you want to receive a keypress from the call recipient (1 for on, 0 [default] for off)',
    )
    schedule: Optional[float] = Field(
        None,
        description='Leave blank for immediate delivery. Your schedule time as a [unix timestamp](http://help.clicksend.com/what-is-a-unix-timestamp).',
    )
    source: Optional[str] = Field(
        None, description="Your method of sending e.g. 'wordpress', 'php', 'c#'."
    )
    to: str = Field(
        ...,
        description='Recipient number in E.164 format or local format ([more info](https://help.clicksend.com/SMS/what-format-does-the-recipient-phone-number-need-to-be-in)).',
    )
    voice: str = Field(..., description="Either 'female' or 'male'.")
