# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:09:39+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic

from models import (
    AccountPostRequest,
    AccountPutRequest,
    AccountVerifySendPutRequest,
    AutomationsEmailReceiptPostRequest,
    AutomationsEmailReceiptRuleIdPutRequest,
    AutomationsFaxInboundInboundRuleIdPutRequest,
    AutomationsFaxInboundPostRequest,
    AutomationsFaxReceiptsPostRequest,
    AutomationsFaxReceiptsRuleIdPutRequest,
    AutomationsSmsInboundInboundRuleIdPutRequest,
    AutomationsSmsInboundPostRequest,
    AutomationsSmsReceiptsPostRequest,
    AutomationsSmsReceiptsReceiptRuleIdPutRequest,
    AutomationsVoiceReceiptsPostRequest,
    AutomationsVoiceReceiptsReceiptRuleIdPutRequest,
    DeliveryIssuesPostRequest,
    EmailAddressesPostRequest,
    EmailCampaignsEmailCampaignIdPutRequest,
    EmailCampaignsPricePostRequest,
    EmailCampaignsSendPostRequest,
    EmailPricePostRequest,
    EmailReceiptsPostRequest,
    EmailSendPostRequest,
    EmailTemplatesImagesTemplateIdPostRequest,
    EmailTemplatesPostRequest,
    EmailTemplatesTemplateIdPutRequest,
    FaxPricePostRequest,
    FaxReceiptsPostRequest,
    FaxReceiptsReadPutRequest,
    FaxSendPostRequest,
    ForgotPasswordPutRequest,
    ForgotPasswordVerifyPutRequest,
    ForgotUsernamePutRequest,
    ListsListIdContactsContactIdPutRequest,
    ListsListIdContactsPostRequest,
    ListsListIdImportCsvPreviewPostRequest,
    ListsListIdImportPostRequest,
    ListsListIdPutRequest,
    ListsListIdRemoveDuplicatesPutRequest,
    ListsPostRequest,
    MmsPricePostRequest,
    MmsSendPostRequest,
    PostDirectMailCampaignsPricePostRequest,
    PostDirectMailCampaignsSendPostRequest,
    PostLettersDetectAddressPostRequest,
    PostLettersPricePostRequest,
    PostLettersSendPostRequest,
    PostPostcardsPricePostRequest,
    PostPostcardsSendPostRequest,
    PostReturnAddressesPostRequest,
    PostReturnAddressesReturnAddressIdPutRequest,
    RechargeCreditCardPutRequest,
    ResellerAccountsClientUserIdPutRequest,
    ResellerAccountsPostRequest,
    ResellerAccountsPublicPostRequest,
    ResellerPutRequest,
    ResellerTransferCreditPutRequest,
    SmsCampaignsPricePostRequest,
    SmsCampaignsSendPostRequest,
    SmsCampaignsSmsCampaignIdPutRequest,
    SmsEmailSmsEmailAddressIdPutRequest,
    SmsEmailSmsPostRequest,
    SmsEmailSmsStrippedStringsPostRequest,
    SmsEmailSmsStrippedStringsRuleIdPutRequest,
    SmsInboundPostRequest,
    SmsInboundReadPutRequest,
    SmsPricePostRequest,
    SmsReceiptsPostRequest,
    SmsReceiptsReadPutRequest,
    SmsSendPostRequest,
    SmsTemplatesPostRequest,
    SmsTemplatesTemplateIdPutRequest,
    SubaccountsPostRequest,
    SubaccountsSubaccountIdPutRequest,
    UploadsConvertConvertPostRequest,
    VoicePricePostRequest,
    VoiceReceiptsPostRequest,
    VoiceSendPostRequest,
)

app = MCPProxy(
    description='This is the official API documentation for ClickSend.com\n\nBelow you will find a current list of the available methods for clicksend.\n\n**NOTE**: You will need to create a free account to use the API.\n\nYou can\n[**Register Here**](https://dashboard.clicksend.com/#/signup/step1/).\n\n# API URL\n\nThe API should always be accessed over SSL.\n\nBase URL: `https://rest.clicksend.com/v3/`\n\n# Authentication\n\nBasic HTTP authentication should be used in the header.\n\n**Either:**\n\n`username`: Your API username\n\n`password`: Your API key\n\n```\nYou can get your API credentials by clicking \'API Credentials\' on the top right of the dashboard.\n```\n\n**OR**\n\n`username`: Your account username\n\n`password`: Your account password\n\n```\nThese are the same credentials that you use to login to the dashboard.\n```\n\n### Authorization Header\n\nThe Authorization header is constructed as follows:\n1. Username and password are combined into a string `username:password`\n1. The resulting string is then encoded using Base64 encoding\n1. The authorization method and a space i.e. "Basic " is then put before the encoded string.\n\nFor example, if the user uses `Aladdin` as the username and `open sesame` as the password then the header is formed as follows:\n\n`Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==`\n\n### PHP Authentication Header Example (using cURL)\n\n`curl_setopt($ch, CURLOPT_HTTPHEADER, [\'Authorization: Basic \' . base64_encode("$username:$password")]);`\n\n# Verbs\n\nThe API uses restful verbs.\n\n| Verb | Description |\n|---|---|\n| `GET` | Select one or more items. Success returns `200` status code. |\n| `POST` | Create a new item. Success returns `200` status code. |\n| `PUT` | Update an item. Success returns `200` status code. |\n| `DELETE` | Delete an item. Success returns `200` status code. |\n\n# Status Codes\n\nThe API will respond with one of the following HTTP status codes.\n\n| Code | Response | Description |\n|---|---|---|\n| `200` | `SUCCESS` | Request completed successfully. |\n| `400` | `BAD_REQUEST` | The request was invalid or cannot be otherwise served. An accompanying error message will explain further. |\n| `401` | `UNAUTHORIZED` | Authentication credentials were missing or incorrect. |\n| `403` | `FORBIDDEN` | The request is understood, but it has been refused or access is not allowed. An accompanying error message will explain why. |\n| `404` | `NOT_FOUND` | The URI requested is invalid or the resource requested does not exists. |\n| `405` | `NOT_FOUND` | Method doesn\'t exist or is not allowed. |\n| `429` | `TOO_MANY_REQUESTS` | Rate Limit Exceeded. Returned when a request cannot be served due to the applicationâ€™s rate limit having been exhausted for the resource. See Rate Limiting. |\n| `500` | `INTERNAL_SERVER_ERROR` | Something is broken |\n\n# Application Status Codes\n\nThe following status codes can be returned in addition to the HTTP status code. For example, when using the Send SMS endpoint:\n\n| Response | Description |\n|---|---|\n| `SUCCESS` | Message added to queue OK. Use delivery reports to get an update on the delivery status.|\n| `MISSING_CREDENTIALS` | Not enough information has been supplied for authentication. Please ensure that your Username and Unique Key are supplied in your request.|\n| `ACCOUNT_NOT_ACTIVATED` | Your account has not been activated.|\n| `INVALID_RECIPIENT` | The destination mobile number is invalid.|\n| `THROTTLED` | Identical message body recently sent to the same recipient. Please try again in a few seconds.|\n| `INVALID_SENDER_ID` | Invalid Sender ID. Please ensure Sender ID is no longer than 11 characters (if alphanumeric), and contains no spaces.|\n| `INSUFFICIENT_CREDIT` | You have reached the end of your message credits. You will need to purchase more message credits.|\n| `INVALID_CREDENTIALS` | Your Username or Unique Key is incorrect.|\n| `ALREADY_EXISTS` | The resource you\'re trying to add already exists.|\n| `EMPTY_MESSAGE` | Message is empty.|\n| `TOO_MANY_RECIPIENTS` | Too many recipients.|\n| `MISSING_REQUIRED_FIELDS` | Some required fields are missing.|\n| `INVALID_SCHEDULE` | The schedule specified is invalid. Use a unix timestamp e.g. 1429170372.|\n| `NOT_ENOUGH_PERMISSION_TO_LIST_ID` | Don\'t have enough privilege to access or send to a list_id.|\n| `INTERNAL_ERROR` | Internal error.|\n| `INVALID_LANG` | An invalid language option has been provided.|\n| `INVALID_VOICE` | An invalid voice (gender) option has been provided.|\n| `SUBJECT_REQUIRED` | Usually happens when MMS Subject is empty.|\n| `INVALID_MEDIA_FILE` | Usually MMS media file is invalid file.|\n| `SOMETHING_IS_WRONG` | Generic Error happened.|\n\n# Required Headers\n\nYou\'ll need to send some headers when making API calls.\n\n| Header | Value |\n|---|---|\n| `Content-type` | `application/json` |\n\n# Pagination\n\nSome methods are paginated. By default, 1 page of 15 items will be returned. You can set the pagination parameters by adding `?page={page}&limit={limit}` to the URL.\n\n## Request\n\n| Parameter | Type | Default | Value |\n|---|---|---|---|\n| `page` | integer | `1` | The page number to return in the response. |\n| `limit` | integer | `15` | The number of results per page. Min 15, Max 100. |\n\n## Response\n\n| Attribute | Type | Value |\n|---|---|---|---|\n| `total` | integer | Total number of results available. |\n| `per_page` | integer | Number of results returned per page. |\n| `current_page` | integer | Current page number. |\n| `last_page` | integer | Last page number. |\n| `next_page_url` | string | A URL of the next page. `null` if not available.|\n| `prev_page_url` | string | A URL of the previous page. `null` if not available.|\n| `from` | integer | Number of the first result in current page. |\n| `to` | integer | Number of the last result in current page. |\n\n# Searching and Sorting\n\nMost GET endpoints allow searching and sorting. Searches are **not** case-sensitive.\n\n## Search\n\nTo perform a search, add `q` as a query parameter. For example:\n\n`/subaccounts?q=field:value,field2:value`\n\n## Order\n\nTo perform a sort, add `order_by` as a query parameter. For example:\n\n`/subaccounts?order_by=field:desc/asc`\n\n## AND / OR\n\nBy default, it will search using the `AND` operator. This can be set using `operator` as a query parameter. For example:\n\n`/subaccounts?q=field:value&operator=OR`\n\n**Options:**\n\n- `AN` - returns results matching **all** query fields specified\n\n- `OR` - returns results matching **any** query fields specified\n\n## Example\n\n`/subaccounts?q=first_name:john,last_name:smith&order_by=subaccount_id:asc&operator=AND`\n\n# CORS\n\nWhen creating your API app, specify the JavaScript (CORS) origins you\'ll be using. We use these origins to return the headers needed for CORS.\n\n# Date and Time\n\nAll date/timestamps will be returned in Unix time (also known as POSIX time or erroneously as Epoch time) with no leap seconds.\n\nFor example: `1435255816`\n\n```\n(ISO 8601: 2015-06-25T18:10:16Z)\n```\n\nMore information: [Wikipedia: Unix time](https://en.wikipedia.org/wiki/Unix_time).\n\nThere is ony one Unix time and it is created by using the UTC/GMT time zone. This means you might have convert time zones to calculate timestamps. Most programming language have libraries to help you converting time zones.\n\n**The current Unix time can be found here:** [Epoch Converter](http://www.epochconverter.com)\n\n# Testing\n\n## Test Credentials\n\nThese API credentials can be used to test specific scenarios.\n\n**Note:** you will need to create a free account to test other scenarios. Refer to introduction.\n\n| API Username | API Key | Description |\n|---|---|---|---|\n| `nocredit` | `D83DED51-9E35-4D42-9BB9-0E34B7CA85AE` | This account has no credit. |\n| `notactive` | `D83DED51-9E35-4D42-9BB9-0E34B7CA85AE` | This account is not active. |\n| `banned` | `D83DED51-9E35-4D42-9BB9-0E34B7CA85AE` | This account is banned. |\n\n## Test SMS/MMS Numbers\n\nThe following numbers can be used when testing. No messages will be sent, and your account won\'t be charged. A success response will be returned.\n\n- `+61411111111`\n\n- `+61422222222`\n\n- `+61433333333`\n\n- `+61444444444`\n\n- `+14055555555`\n\n- `+14055555666`\n\n- `+447777777777`\n\n- `+8615555555555`\n\n## Test Voice Numbers\n\nThe following numbers can be used when testing. No messages will be sent, and your account won\'t be charged. A success response will be returned.\n\n- `+61411111111`\n\n- `+61422222222`\n\n- `+61433333333`\n\n- `+61444444444`\n\n- `+14055555555`\n\n- `+14055555666`\n\n- `+447777777777`\n\n- `+8615555555555`\n\n## Test Fax Numbers\n\nThe following numbers can be used when testing. No messages will be sent, and your account won\'t be charged. A success response will be returned.\n\n- `+61261111111`\n\n- `+61262222222`\n\n- `+61263333333`\n\n## Test Email Addresses\n\nThe following email addresses can be used when testing. No messages will be sent, and your account won\'t be charged. A success response will be returned.\n\n- `test1@test.com`\n\n- `test2@test.com`\n\n- `test3@test.com`\n\n## Test Post Letter Addresses\n\nThe following Postal Codes (address_postal_code) can be used when testing. No messages will be sent when using these post codes, and your account won\'t be charged. A success response will be returned.\n\n- `11111`\n\n- `22222`\n\n- `33333`',
    title='ClickSend REST API v3',
    version='1.0.0',
    servers=[{'url': 'https://rest.clicksend.com/v3'}],
)


@app.get('/account', tags=['account_management'])
def get_account():
    """
    Get account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account',
    description=""" **Note:** *Authentication isn't required to create a new account.* """,
    tags=['account_management'],
)
def create_a_new_account(body: AccountPostRequest = None):
    """
    Create a new account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account',
    tags=[
        'account_management',
        'user_authentication_management',
        'contacts_management',
        'reseller_account_management',
    ],
)
def update__account(body: AccountPutRequest = None):
    """
    Update Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account-verify/send',
    tags=['account_management', 'user_authentication_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def send_account_activation_token(body: AccountVerifySendPutRequest = None):
    """
    Send account activation token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account-verify/verify/{activation_token}',
    tags=['account_management', 'user_authentication_management'],
)
def verify_new_account(activation_token: str):
    """
    Verify new account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/account/usage/{year}/{month}/{type}', tags=['account_management'])
def account__usage(year: float, month: float = ..., type: str = ...):
    """
    Account Usage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/automations/email/receipt', tags=['email_automation_rules_management'])
def get_automations_email_receipt():
    """
    List Rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/automations/email/receipt', tags=['email_automation_rules_management'])
def post_automations_email_receipt(body: AutomationsEmailReceiptPostRequest = None):
    """
    Create a New Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/automations/email/receipt/{rule_id}',
    tags=[
        'email_automation_rules_management',
        'fax_automation_rules_management',
        'sms_automation_rules_management',
        'voice_rules_management',
    ],
)
def delete_automations_email_receipt__rule_id(rule_id: float):
    """
    Delete a Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/email/receipt/{rule_id}',
    tags=['email_automation_rules_management', 'voice_rules_management'],
)
def get_automations_email_receipt__rule_id(rule_id: float):
    """
    Get a Specific Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/automations/email/receipt/{rule_id}', tags=['email_automation_rules_management']
)
def put_automations_email_receipt__rule_id(
    rule_id: float, body: AutomationsEmailReceiptRuleIdPutRequest = None
):
    """
    Update a Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/fax/inbound',
    tags=[
        'email_automation_rules_management',
        'fax_automation_rules_management',
        'sms_automation_rules_management',
        'voice_rules_management',
    ],
)
def get_automations_fax_inbound():
    """
    List rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/automations/fax/inbound', tags=['fax_automation_rules_management'])
def post_automations_fax_inbound(body: AutomationsFaxInboundPostRequest = None):
    """
    Create a new rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/automations/fax/inbound/{inbound_rule_id}',
    tags=[
        'email_automation_rules_management',
        'fax_automation_rules_management',
        'sms_automation_rules_management',
        'voice_rules_management',
    ],
)
def delete_automations_fax_inbound__inbound_rule_id(inbound_rule_id: float):
    """
    Delete a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/fax/inbound/{inbound_rule_id}',
    tags=[
        'fax_automation_rules_management',
        'voice_rules_management',
        'email_automation_rules_management',
    ],
)
def get_automations_fax_inbound__inbound_rule_id(inbound_rule_id: float):
    """
    Get a specific rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/automations/fax/inbound/{inbound_rule_id}',
    tags=['fax_automation_rules_management'],
)
def put_automations_fax_inbound__inbound_rule_id(
    inbound_rule_id: float, body: AutomationsFaxInboundInboundRuleIdPutRequest = None
):
    """
    Update a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/automations/fax/receipts', tags=['email_automation_rules_management'])
def list__rules():
    """
    List Rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/automations/fax/receipts',
    tags=['fax_automation_rules_management', 'email_automation_rules_management'],
)
def create_a__new__rule(body: AutomationsFaxReceiptsPostRequest = None):
    """
    Create a New Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/automations/fax/receipts/{rule_id}', tags=['email_automation_rules_management']
)
def delete_a__rule(rule_id: float):
    """
    Delete a Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/fax/receipts/{rule_id}',
    tags=[
        'email_automation_rules_management',
        'fax_automation_rules_management',
        'sms_automation_rules_management',
        'voice_rules_management',
    ],
)
def get_a__specific__rule(rule_id: float):
    """
    Get a Specific Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/automations/fax/receipts/{rule_id}',
    tags=['email_automation_rules_management', 'fax_automation_rules_management'],
)
def update_a__rule(rule_id: float, body: AutomationsFaxReceiptsRuleIdPutRequest = None):
    """
    Update a Rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/sms/inbound',
    tags=[
        'email_automation_rules_management',
        'fax_automation_rules_management',
        'sms_automation_rules_management',
        'voice_rules_management',
    ],
)
def list_rules():
    """
    List rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/automations/sms/inbound/', tags=['sms_automation_rules_management'])
def create_a_new_rule(body: AutomationsSmsInboundPostRequest = None):
    """
    Create a new rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/automations/sms/inbound/{inbound_rule_id}',
    tags=['fax_automation_rules_management'],
)
def delete_a_rule(inbound_rule_id: float):
    """
    Delete a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/sms/inbound/{inbound_rule_id}',
    tags=[
        'fax_automation_rules_management',
        'voice_rules_management',
        'email_automation_rules_management',
    ],
)
def get_a_specific_rule(inbound_rule_id: float):
    """
    Get a specific rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/automations/sms/inbound/{inbound_rule_id}',
    tags=['sms_automation_rules_management'],
)
def update_a_rule(
    inbound_rule_id: float, body: AutomationsSmsInboundInboundRuleIdPutRequest = None
):
    """
    Update a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/sms/receipts',
    tags=[
        'email_automation_rules_management',
        'fax_automation_rules_management',
        'sms_automation_rules_management',
        'voice_rules_management',
    ],
)
def get_automations_sms_receipts():
    """
    List rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/automations/sms/receipts', tags=['sms_automation_rules_management'])
def post_automations_sms_receipts(body: AutomationsSmsReceiptsPostRequest = None):
    """
    Create a new rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/automations/sms/receipts/{receipt_rule_id}',
    tags=['email_automation_rules_management'],
)
def delete_automations_sms_receipts__receipt_rule_id(receipt_rule_id: float):
    """
    Delete a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/sms/receipts/{receipt_rule_id}',
    tags=['email_automation_rules_management', 'voice_rules_management'],
)
def get_automations_sms_receipts__receipt_rule_id(receipt_rule_id: float):
    """
    Get a specific rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/automations/sms/receipts/{receipt_rule_id}',
    tags=['sms_automation_rules_management'],
)
def put_automations_sms_receipts__receipt_rule_id(
    receipt_rule_id: float, body: AutomationsSmsReceiptsReceiptRuleIdPutRequest = None
):
    """
    Update a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/voice/receipts',
    tags=[
        'email_automation_rules_management',
        'fax_automation_rules_management',
        'sms_automation_rules_management',
        'voice_rules_management',
    ],
)
def get_automations_voice_receipts():
    """
    List rules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/automations/voice/receipts', tags=['voice_rules_management'])
def post_automations_voice_receipts(body: AutomationsVoiceReceiptsPostRequest = None):
    """
    Create a new rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/automations/voice/receipts/{receipt_rule_id}',
    tags=['email_automation_rules_management'],
)
def delete_automations_voice_receipts__receipt_rule_id(receipt_rule_id: float):
    """
    Delete a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/automations/voice/receipts/{receipt_rule_id}',
    tags=['email_automation_rules_management', 'voice_rules_management'],
)
def get_automations_voice_receipts__receipt_rule_id(receipt_rule_id: float):
    """
    Get a specific rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/automations/voice/receipts/{receipt_rule_id}',
    tags=[
        'voice_rules_management',
        'email_automation_rules_management',
        'sms_automation_rules_management',
    ],
)
def put_automations_voice_receipts__receipt_rule_id(
    receipt_rule_id: float, body: AutomationsVoiceReceiptsReceiptRuleIdPutRequest = None
):
    """
    Update a rule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/contact-suggestions', tags=['contact_suggestions_management'])
def list__contact__suggestions():
    """
    List Contact Suggestions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/countries', tags=['country_data_retrieval'])
def get_all__countries():
    """
    Get all Countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/delivery-issues', tags=['delivery_management_issues'])
def get__delivery__issues():
    """
    Get Delivery Issues
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/delivery-issues', tags=['delivery_management_issues'])
def create__delivery__issue(body: DeliveryIssuesPostRequest = None):
    """
    Create Delivery Issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/email-campaigns', tags=['email_campaigns_management'])
def get__all__email__campaigns():
    """
    Get All Email Campaigns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/email-campaigns/price',
    tags=[
        'email_operations_management',
        'pricing_calculations_management',
        'email_campaigns_management',
    ],
)
def calculate__price(body: EmailCampaignsPricePostRequest = None):
    """
    Calculate Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/email-campaigns/send', tags=['email_campaigns_management'])
def create__email__campaign(body: EmailCampaignsSendPostRequest = None):
    """
    Create Email Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email-campaigns/{campaign_id}/history',
    tags=['email_campaigns_management', 'email_history_management'],
)
def get__specific__email__campaign__history(campaign_id: float):
    """
    Get Specific Email Campaign History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/email-campaigns/{email_campaign_id}', tags=['email_campaigns_management'])
def get__specific__email__campaign(email_campaign_id: float):
    """
    Get Specific Email Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/email-campaigns/{email_campaign_id}', tags=['email_campaigns_management'])
def update__email__campaign(
    email_campaign_id: float, body: EmailCampaignsEmailCampaignIdPutRequest = None
):
    """
    Update Email Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/email-campaigns/{email_campaign_id}/cancel', tags=['email_campaigns_management']
)
def cancel__email__campaign(email_campaign_id: float):
    """
    Cancel Email Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/email/address-verify/{email_address_id}/send',
    tags=['account_management', 'email_verification_management'],
)
def send__verification__token(email_address_id: float):
    """
    Send Verification Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/email/address-verify/{email_address_id}/verify/{activation_token}',
    tags=['email_verification_management', 'account_management'],
)
def verify__allowed__email__address(
    email_address_id: float, activation_token: str = ...
):
    """
    Verify Allowed Email Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email/addresses', tags=['email_verification_management', 'account_management']
)
def get__all__allowed__email__addresses():
    """
    Get All Allowed Email Addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/email/addresses', tags=['email_verification_management', 'account_management']
)
def create__allowed__email__address(body: EmailAddressesPostRequest = None):
    """
    Create Allowed Email Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/email/addresses/{email_address_id}',
    tags=['email_verification_management', 'account_management'],
)
def delete__allowed__email__address(email_address_id: float):
    """
    Delete Allowed Email Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email/addresses/{email_address_id}',
    tags=['email_verification_management', 'account_management'],
)
def get__specific__allowed__email__address(email_address_id: float):
    """
    Get Specific Allowed Email Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/email/history', tags=['email_history_management'])
def email__history():
    """
    Email History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/email/history/export?filename={filename}', tags=['email_history_management'])
def export__history(filename: str):
    """
    Export History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email/master-templates',
    tags=['email_template_handling', 'email_campaigns_management'],
)
def get__all__master__email__templates():
    """
    Get All Master Email Templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/email/master-templates-categories', tags=['email_template_handling'])
def get__all__master__template__categories():
    """
    Get All Master Template Categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email/master-templates-categories/{category_id}', tags=['email_template_handling']
)
def get__specific__email__template__category(category_id: str):
    """
    Get Specific Email Template Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email/master-templates-categories/{category_id}/master-templates',
    tags=['email_template_handling'],
)
def get__all__templates__for__category(category_id: str):
    """
    Get All Templates For Category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/email/master-templates/{template_id}', tags=['email_template_handling'])
def get__specific__master__template(template_id: str):
    """
    Get Specific Master Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/email/price',
    tags=['email_operations_management', 'pricing_calculations_management'],
)
def email__price(body: EmailPricePostRequest = None):
    """
    Email Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/email/receipts',
    tags=[
        'email_automation_rules_management',
        'email_campaigns_management',
        'email_history_management',
        'email_operations_management',
    ],
)
def post_email_receipts(body: EmailReceiptsPostRequest = None):
    """
    Add a Test Delivery Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/email/send',
    tags=[
        'email_operations_management',
        'email_campaigns_management',
        'email_history_management',
    ],
)
def email__send(body: EmailSendPostRequest = None):
    """
    Email Send
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email/templates', tags=['email_template_handling', 'email_operations_management']
)
def get__all__email__templates():
    """
    Get All Email Templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/email/templates', tags=['email_template_handling', 'email_operations_management']
)
def create__new__email__template_from__master__template(
    body: EmailTemplatesPostRequest = None,
):
    """
    Create New Email Template from Master Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/email/templates-images/{template_id}',
    tags=['email_template_handling', 'file_upload_management'],
)
def upload__image_to__specific__template(
    template_id: str, body: EmailTemplatesImagesTemplateIdPostRequest = None
):
    """
    Upload Image to Specific Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/email/templates/{template_id}',
    tags=[
        'email_template_handling',
        'email_operations_management',
        'template_management_operations',
    ],
)
def delete__email__template(template_id: float):
    """
    Delete Email Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/email/templates/{template_id}',
    tags=['email_template_handling', 'email_operations_management'],
)
def get__specific__email__template(template_id: float):
    """
    Get Specific Email Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/email/templates/{template_id}',
    tags=['email_template_handling', 'email_operations_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_an__email__template(
    template_id: float, body: EmailTemplatesTemplateIdPutRequest = None
):
    """
    Update an Email Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fax/history/export?filename={filename}',
    tags=['fax_operations_management', 'fax_automation_rules_management'],
)
def export__fax__history(filename: str):
    """
    Export Fax History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fax/history?date_from={date_from}&date_to={date_to}&q={q}&order_by={order_by}',
    description=""" Get a list of Fax History. """,
    tags=['fax_operations_management'],
)
def get__fax__history(
    date_from: float, date_to: float = ..., q: str = ..., order_by: str = ...
):
    """
    Get Fax History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/fax/price', tags=['pricing_calculations_management'])
def post_fax_price(body: FaxPricePostRequest = None):
    """
    Calculate Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fax/receipts',
    tags=['fax_operations_management', 'fax_automation_rules_management'],
)
def list_of__fax__delivery__receipts():
    """
    List of Fax Delivery Receipts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/fax/receipts',
    tags=['fax_operations_management', 'fax_automation_rules_management'],
)
def add_a__test__delivery__receipt(body: FaxReceiptsPostRequest = None):
    """
    Add a Test Delivery Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/fax/receipts-read',
    tags=['fax_operations_management', 'fax_automation_rules_management'],
)
def mark__fax__delivery__receipts_as_read(body: FaxReceiptsReadPutRequest = None):
    """
    Mark Fax Delivery Receipts as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/fax/receipts/{message_id}', tags=['fax_operations_management'])
def get_a__specific__fax__delivery__receipt(message_id: str):
    """
    Get a Specific Fax Delivery Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/fax/send',
    description=""" **Letter File Options**

**Use existing URL**

With this option, you can use an existing URL to a PDF document. For example, you might generate the pdf on your server.

**Upload File to Our Server**

With this option, you can use the `/uploads` endpoint to upload the document. The `/uploads` endpoint returns a URL that can be used in the `/fax/send` endpoint. """,
    tags=['fax_operations_management'],
)
def send__fax(body: FaxSendPostRequest = None):
    """
    Send Fax
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/forgot-password', tags=['account_management', 'user_authentication_management']
)
def forgot__password(body: ForgotPasswordPutRequest = None):
    """
    Forgot Password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/forgot-password/verify',
    tags=['user_authentication_management', 'account_management'],
)
def verify__forgot__password(body: ForgotPasswordVerifyPutRequest = None):
    """
    Verify Forgot Password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/forgot-username', tags=['account_management', 'user_authentication_management']
)
def forgot__username(body: ForgotUsernamePutRequest = None):
    """
    Forgot Username
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/lists', tags=['contacts_list_management', 'contacts_management'])
def get_all__contact__lists():
    """
    Get all Contact Lists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lists',
    tags=['contacts_list_management', 'contacts_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_a_new_contact_list(body: ListsPostRequest = None):
    """
    Create a new contact list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/lists/{from_list_id}/contacts/{contact_id}/{to_list_id}',
    description=""" Transfers a specific contact to another list. """,
    tags=['contacts_list_management', 'contacts_management'],
)
def transfer_a__contact(
    from_list_id: float, contact_id: float = ..., to_list_id: float = ...
):
    """
    Transfer a Contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/lists/{list_id}', tags=['contacts_list_management'])
def delete_a_specific_contact_list(list_id: float):
    """
    Delete a specific contact list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/lists/{list_id}', tags=['contacts_list_management', 'contacts_management'])
def get_a_specific_contact_list(list_id: float):
    """
    Get a specific contact list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/lists/{list_id}',
    tags=['contacts_list_management', 'contacts_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_a_specific_contact_list(list_id: float, body: ListsListIdPutRequest = None):
    """
    Update a specific contact list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/{list_id}/contacts',
    tags=['contacts_list_management', 'contacts_management'],
)
def get_all__contacts_in_a__list(list_id: float):
    """
    Get all Contacts in a List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lists/{list_id}/contacts',
    description=""" Note that the fields `phone_number`, `fax_number` and email` are all optional; however at least one of them must be specified, otherwise the API call will fail. """,
    tags=['contacts_list_management', 'contacts_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_a_new_contact(list_id: float, body: ListsListIdContactsPostRequest = None):
    """
    Create a new contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/lists/{list_id}/contacts/{contact_id}',
    tags=['contacts_list_management', 'contacts_management'],
)
def delete_a_specific_contact(list_id: float, contact_id: float = ...):
    """
    Delete a specific contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/{list_id}/contacts/{contact_id}',
    tags=['contacts_management', 'contacts_list_management'],
)
def get_a_specific_contact(list_id: float, contact_id: float = ...):
    """
    Get a specific contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/lists/{list_id}/contacts/{contact_id}',
    tags=['contacts_list_management', 'contacts_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_a_specific_contact(
    list_id: float,
    contact_id: float = ...,
    body: ListsListIdContactsContactIdPutRequest = None,
):
    """
    Update a specific contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/{list_id}/export?filename={filename}',
    tags=['contacts_list_management', 'contacts_management'],
)
def export__contacts__list(filename: str, list_id: str = ...):
    """
    Export Contacts List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lists/{list_id}/import', tags=['contacts_list_management', 'contacts_management']
)
def import__contacts_to__list(
    list_id: float, body: ListsListIdImportPostRequest = None
):
    """
    Import Contacts to List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lists/{list_id}/import-csv-preview',
    description=""" Show first row of the csv import file. """,
    tags=['file_upload_management'],
)
def show__c_s_v__import__file__preview(
    list_id: float, body: ListsListIdImportCsvPreviewPostRequest = None
):
    """
    Show CSV Import File Preview
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lists/{list_id}/import-fields',
    tags=['contacts_management', 'contacts_list_management', 'account_management'],
)
def get__list_of__acceptable__import__fields(list_id: str):
    """
    Get List of Acceptable Import Fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/lists/{list_id}/remove-duplicates',
    tags=['contacts_management', 'contacts_list_management'],
)
def remove__duplicate__contacts(
    list_id: float, body: ListsListIdRemoveDuplicatesPutRequest = None
):
    """
    Remove Duplicate Contacts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}',
    tags=['contacts_management', 'contacts_list_management'],
)
def remove__opted__out__contacts(list_id: float, opt_out_list_id: float = ...):
    """
    Remove Opted Out Contacts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/mms/cancel-all', tags=['mms_operations_management'])
def cancel__all__m_m_s():
    """
    Cancel All MMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mms/history/export?filename={filename}',
    tags=['mms_operations_management', 'sms_history_management'],
)
def export__m_m_s__history(filename: str):
    """
    Export MMS History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mms/history?q={q}&order_by={order_by}&date_from={date_from}&date_to={date_to}',
    tags=['mms_operations_management', 'sms_history_management'],
)
def get__m_m_s__history(
    q: str, order_by: str = ..., date_from: str = ..., date_to: str = ...
):
    """
    Get MMS History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mms/price',
    tags=['mms_operations_management', 'pricing_calculations_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get__price(body: MmsPricePostRequest = None):
    """
    Get Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/mms/receipts', tags=['sms_receipt_tracking', 'delivery_management_issues'])
def get_all__delivery__receipts():
    """
    Get all Delivery Receipts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mms/receipts-read',
    tags=['email_automation_rules_management', 'delivery_management_issues'],
)
def mark__receipts__as__read():
    """
    Mark Receipts As Read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mms/receipts/{message_id}',
    tags=['sms_receipt_tracking', 'delivery_management_issues'],
)
def get__delivery__receipt(message_id: str):
    """
    Get Delivery Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mms/send',
    tags=['mms_operations_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def send__m_m_s(body: MmsSendPostRequest = None):
    """
    Send MMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/mms/{message_id}/cancel', tags=['mms_operations_management'])
def cancel__m_m_s(message_id: str):
    """
    Cancel MMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/numbers', tags=['dedicated_number_handling'])
def get_all__dedicated__numbers():
    """
    Get all Dedicated Numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/numbers/buy/{dedicated_number}',
    tags=['dedicated_number_handling', 'account_management'],
)
def buy_dedicated_number(dedicated_number: str):
    """
    Buy dedicated number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/numbers/search/{country}?{search}=1&{search_type}=2',
    tags=['dedicated_number_handling', 'country_data_retrieval'],
)
def search__dedicated__numbers_by__country(
    country: str, search: str = ..., search_type: float = ...
):
    """
    Search Dedicated Numbers by Country
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/direct-mail/campaigns',
    description=""" Get list of direct mail campaigns. """,
    tags=['direct_mail_campaigns_management'],
)
def list__direct__mail__campaigns():
    """
    List Direct Mail Campaigns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/direct-mail/campaigns/price',
    description=""" Calculate direct mail campaign price. """,
    tags=['direct_mail_campaigns_management', 'pricing_calculations_management'],
)
def calculate__direct__mail__campaign__price(
    body: PostDirectMailCampaignsPricePostRequest = None,
):
    """
    Calculate Direct Mail Campaign Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/direct-mail/campaigns/send',
    description=""" Create new direct mail campaign. """,
    tags=['direct_mail_campaigns_management'],
)
def create__new__campaign(body: PostDirectMailCampaignsSendPostRequest = None):
    """
    Create New Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/direct-mail/locations/search/{country}/?q={query}',
    tags=['country_data_retrieval', 'address_management'],
)
def search__locations(country: str, query: str = ...):
    """
    Search Locations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/letters/detect-address',
    description=""" The `detect-address` endpoint accepts either a letter in PDF format or an address string and attempts to convert it to a standard address format. Note that the PDF should be in standard address format, having the recipient's name and address listed at the top.

The endpoint accepts two types of data:
1. A PDF file in `base64` encoding. In this case, submit the `base64`-encoded PDF file contents in the `content` field of the request body.
2. An address string. In this case, submit the address in a string using the `address` field of the request body. """,
    tags=['address_management'],
)
def detect__address(body: PostLettersDetectAddressPostRequest = None):
    """
    Detect Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/letters/history',
    tags=['postal_services_operations', 'email_history_management'],
)
def get__post__letter__history():
    """
    Get Post Letter History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/letters/history/export?filename={filename}',
    tags=['postal_services_operations', 'email_history_management'],
)
def export__post__letter__history(filename: str):
    """
    Export Post Letter History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/letters/price',
    tags=[
        'direct_mail_campaigns_management',
        'postal_services_operations',
        'pricing_calculations_management',
    ],
)
def post_post_letters_price(body: PostLettersPricePostRequest = None):
    """
    Calculate Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/letters/send',
    description=""" **Supported File Types**
We support `pdf`, `docx` and `doc` files. Contact us to add support for any other file type. If you're using `docx` or `doc` files, you'll need to convert the file first using our uploads endpoint with the querystring parameter `convert=post` e.g. `POST /uploads?convert=post`. This will return a URL to the converted pdf file that can be used in the `/post/letters/send` endpoint.

**Letter File Options**

**Use existing URL**

With this option, you can use an existing URL to a `pdf` document. For example, you might generate the `pdf` on your server.

**Upload File to Our Server**

With this option, you can use the `/uploads` endpoint to upload the document. The `/uploads` endpoint returns a URL that can be used in the `/post/letters/send` endpoint. """,
    tags=['postal_services_operations', 'direct_mail_campaigns_management'],
)
def send__post__letter(body: PostLettersSendPostRequest = None):
    """
    Send Post Letter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/postcards/export?filename={filename}',
    tags=[
        'email_history_management',
        'postal_services_operations',
        'postcard_handling_operations',
    ],
)
def export__postcard__history(filename: str):
    """
    Export Postcard History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/postcards/history',
    tags=['postal_services_operations', 'postcard_handling_operations'],
)
def get__postcard__history():
    """
    Get Postcard History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/postcards/price',
    description=""" For `file_urls` field. You can attach at least 1 and max of 2 PDF file urls.

- Supply a single pdf with 2 pages (front and back)

- Supply 2 urls to seperate PDFs """,
    tags=['pricing_calculations_management', 'postcard_handling_operations'],
)
def calculate__pricing(body: PostPostcardsPricePostRequest = None):
    """
    Calculate Pricing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/postcards/send',
    description=""" **Supported File Types**
We support PDF, docx and doc. Contact us to add support for any other file type. If you're using docx or doc files, you'll need to convert the file first using our uploads endpoint with the querystring parameter ?convert=post. e.g. POST /uploads?convert=post. This will return a URL to the converted pdf file that can be used in the /post/postcards/send endpoint.

**Postcard File Options**

**Use existing URL**

With this option, you can use an existing URL to a PDF document. For example, you might generate the pdf on your server.

For `file_urls` field. You can attach at least 1 and max of 2 PDF file urls.

- Supply a single pdf with 2 pages (front and back)

- Supply 2 urls to seperate PDFs

**Upload File to Our Server**

With this option, you can use the `/uploads` endpoint to upload the document. The `/uploads` endpoint returns a URL that can be used in the `/post/postcards/send` endpoint. """,
    tags=[
        'postal_services_operations',
        'postcard_handling_operations',
        'direct_mail_campaigns_management',
    ],
)
def send__postcard(body: PostPostcardsSendPostRequest = None):
    """
    Send Postcard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/return-addresses',
    tags=[
        'address_management',
        'postal_services_operations',
        'postcard_handling_operations',
    ],
)
def get__list_of__post__return__addresses():
    """
    Get List of Post Return Addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/post/return-addresses',
    tags=['address_management', 'postcard_handling_operations'],
)
def create_a__post__return__address(body: PostReturnAddressesPostRequest = None):
    """
    Create a Post Return Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/post/return-addresses/{return_address_id}',
    tags=['address_management', 'postcard_handling_operations'],
)
def delete__post__return__address(return_address_id: float):
    """
    Delete Post Return Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/post/return-addresses/{return_address_id}',
    tags=[
        'address_management',
        'postcard_handling_operations',
        'postal_services_operations',
    ],
)
def get__post__return__address(return_address_id: float):
    """
    Get Post Return Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/post/return-addresses/{return_address_id}',
    tags=['address_management', 'postcard_handling_operations'],
)
def update__post__return__address(
    return_address_id: float, body: PostReturnAddressesReturnAddressIdPutRequest = None
):
    """
    Update Post Return Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pricing/{country}?currency={currency}',
    tags=['country_data_retrieval', 'pricing_calculations_management'],
)
def get__country__pricing(country: str, currency: str = ...):
    """
    Get Country Pricing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/recharge/credit-card', tags=['credit_card_data_management', 'account_management']
)
def get__credit__card_info():
    """
    Get Credit Card info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/recharge/credit-card', tags=['account_management', 'credit_card_data_management']
)
def update__credit__card_info(body: RechargeCreditCardPutRequest = None):
    """
    Update Credit Card info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/recharge/packages?country={country}',
    tags=['country_data_retrieval', 'package_handling'],
)
def list_of__packages(country: str):
    """
    List of Packages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/recharge/purchase/{package_id}', tags=['package_handling'])
def purchase_a__package(package_id: float):
    """
    Purchase a Package
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/recharge/transactions', tags=['transaction_record_management'])
def get__transactions():
    """
    Get Transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/recharge/transactions/{transaction_id}', tags=['transaction_record_management']
)
def get_a_specific_transaction(transaction_id: str):
    """
    Get a specific transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/referral/accounts', tags=['referral_account_management'])
def get__list_of__referral__accounts():
    """
    Get List of Referral Accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reseller',
    description=""" Get reseller setting. """,
    tags=['reseller_account_management'],
)
def get__reseller__setting():
    """
    Get Reseller Setting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/reseller',
    description=""" Update a specific reseller setting. """,
    tags=['reseller_account_management', 'account_management'],
)
def update__reseller__setting(body: ResellerPutRequest = None):
    """
    Update Reseller Setting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reseller/accounts',
    description=""" Get list of Reseller Accounts """,
    tags=['reseller_account_management', 'account_management'],
)
def list_of__reseller__accounts():
    """
    List of Reseller Accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reseller/accounts', tags=['account_management', 'reseller_account_management']
)
def create__reseller__account(body: ResellerAccountsPostRequest = None):
    """
    Create Reseller Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reseller/accounts-public',
    tags=['account_management', 'reseller_account_management'],
)
def create__reseller__account____public(body: ResellerAccountsPublicPostRequest = None):
    """
    Create Reseller Account - Public
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reseller/accounts/{client_user_id}',
    description=""" Get a specific reseller account. """,
    tags=['reseller_account_management', 'account_management'],
)
def get__reseller__account(client_user_id: float):
    """
    Get Reseller Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/reseller/accounts/{client_user_id}',
    tags=['account_management', 'reseller_account_management'],
)
def update__reseller__account(
    client_user_id: float, body: ResellerAccountsClientUserIdPutRequest = None
):
    """
    Update Reseller Account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/reseller/transfer-credit',
    tags=['reseller_account_management', 'transaction_record_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def transfer__credit(body: ResellerTransferCreditPutRequest = None):
    """
    Transfer Credit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reseller/{subdomain}',
    description=""" Get reseller setting by subdomin. """,
    tags=['reseller_account_management'],
)
def reseller__by__subdomain(subdomain: str):
    """
    Reseller By Subdomain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sdk-download/{type}', tags=['package_handling'])
def s_d_k__download(type: str):
    """
    SDK Download
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search/contacts-lists?q={q}',
    tags=['contacts_list_management', 'contacts_management'],
)
def search__contacts__lists(q: str):
    """
    Search Contacts-Lists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sms-campaigns', tags=['sms_campaigns_management'])
def get_list_of__s_m_s__campaigns():
    """
    Get list of SMS Campaigns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms-campaigns/price',
    tags=['sms_campaigns_management', 'pricing_calculations_management'],
)
def calculate__price_for__s_m_s__campaign(body: SmsCampaignsPricePostRequest = None):
    """
    Calculate Price for SMS Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms-campaigns/send',
    description=""" This is functionally identical to the **POST /sms-campaigns/send** endpoint, other than adding the `smsg.us/xxxxx` string to the message body additional `url_to_shorten` parameter. """,
    tags=['sms_campaigns_management'],
)
def use__short__u_r_l(body: SmsCampaignsSendPostRequest = None):
    """
    Use Short URL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms-campaigns/{campaign_id}/link-export?filename={filename}',
    description=""" Compile all link tracking for the specified campaign into a CSV for download. """,
    tags=['email_campaigns_management', 'email_history_management'],
)
def link__tracking__export(campaign_id: float, filename: str = ...):
    """
    Link Tracking Export
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms-campaigns/{campaign_id}/link-statistics',
    description=""" Get the breakdown of statistics for your campaign. Note that the returned values vary depending on your specific customers' interaction, so it's not safe to assume a value will always be specified. """,
    tags=[
        'email_campaigns_management',
        'email_history_management',
        'email_operations_management',
    ],
)
def link__statistics(campaign_id: float):
    """
    Link Statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms-campaigns/{campaign_id}/link-tracking',
    description=""" This endpoint gives you a paginated overview of all the links in a particular campaign, and who has and hasn't visited them. """,
    tags=['email_campaigns_management', 'sms_campaigns_management'],
)
def link__tracking(campaign_id: float):
    """
    Link Tracking
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms-campaigns/{sms_campaign_id}',
    tags=['sms_campaigns_management', 'sms_statistics_retrieval'],
)
def get__s_m_s__campaign(sms_campaign_id: float):
    """
    Get SMS Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sms-campaigns/{sms_campaign_id}',
    tags=['sms_campaigns_management', 'sms_automation_rules_management'],
)
def update_an__s_m_s__campaign(
    sms_campaign_id: float, body: SmsCampaignsSmsCampaignIdPutRequest = None
):
    """
    Update an SMS Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/sms-campaigns/{sms_campaign_id}/cancel', tags=['sms_campaigns_management'])
def cancel_an__s_m_s__campaign(sms_campaign_id: float):
    """
    Cancel an SMS Campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/sms/cancel-all', tags=['scheduled_messages_management'])
def cancel_all__scheduled__messages():
    """
    Cancel all Scheduled Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/email-sms',
    description=""" Get list of allowed email addresses. """,
    tags=['email_to_sms_management', 'sms_automation_rules_management'],
)
def list_of__email_to__s_m_s__allowed__address():
    """
    List of Email-to-SMS Allowed Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms/email-sms',
    description=""" Create an allowed email address. """,
    tags=['email_to_sms_management', 'sms_automation_rules_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create__email_to__s_m_s__allowed__address(body: SmsEmailSmsPostRequest = None):
    """
    Create Email to SMS Allowed Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/email-sms-stripped-strings', tags=['stripped_string_operations_management']
)
def list__stripped__strings():
    """
    List Stripped Strings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms/email-sms-stripped-strings', tags=['stripped_string_operations_management']
)
def create__stripped__string(body: SmsEmailSmsStrippedStringsPostRequest = None):
    """
    Create Stripped String
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sms/email-sms-stripped-strings/{rule_id}',
    tags=['stripped_string_operations_management', 'sms_operations_management'],
)
def delete__stripped__string(rule_id: float):
    """
    Delete Stripped String
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/email-sms-stripped-strings/{rule_id}',
    tags=['stripped_string_operations_management', 'sms_operations_management'],
)
def find__specific__stripped__string(rule_id: float):
    """
    Find Specific Stripped String
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sms/email-sms-stripped-strings/{rule_id}',
    tags=['sms_automation_rules_management', 'stripped_string_operations_management'],
)
def update__stripped__string(
    rule_id: float, body: SmsEmailSmsStrippedStringsRuleIdPutRequest = None
):
    """
    Update Stripped String
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sms/email-sms/{email_address_id}',
    description=""" Delete a specific allowed email address. """,
    tags=[
        'email_to_sms_management',
        'account_management',
        'email_verification_management',
    ],
)
def delete__email_to__s_m_s__allowed__address(email_address_id: float):
    """
    Delete Email-to-SMS Allowed Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/email-sms/{email_address_id}',
    description=""" Get a specific allowed email address. """,
    tags=['email_to_sms_management', 'account_management'],
)
def get_specific__email_to__s_m_s__allowed__address(email_address_id: float):
    """
    Get specific Email-to-SMS Allowed Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sms/email-sms/{email_address_id}',
    description=""" Update a specific allowed email address. """,
    tags=['email_to_sms_management', 'account_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update__email_to__s_m_s__allowed__address(
    email_address_id: float, body: SmsEmailSmsEmailAddressIdPutRequest = None
):
    """
    Update Email-to-SMS Allowed Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/history/export?filename={filename}',
    tags=['sms_history_management', 'sms_automation_rules_management'],
)
def export__s_m_s__history(filename: str):
    """
    Export SMS History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/history?date_from={date_from}&date_to={date_to}',
    description=""" **SMS Delivery Status**

**Status (status field)**

| Status | Description |
|---|---|---|
| `Completed` | Added to delivery queue. Waiting to be sent to the network.|
| `Sent` | Message sent to the network.|
| `Cancelled` | Message cancelled.|
| `Scheduled` | Message scheduled.|
| `WaitApproval` | Waiting approval by our team. This is temporary and will change to 'Sent' once approved. This only happens for a few messages that are flagged for approval by our automated spam-detection system.|

**Status Codes (status_code field)**

| Code | Text | Description |
|---|---|---|
| `200` | Sent by network| Temporary success|
| `201` | Received on handset| Permanent success|
| `300` | Delivery failure| Permanent failure|
| `301` | Delivery failure| Permanent failure|
| `302` | Delivery failure| Temporary failure - supplier routing issue| """,
    tags=['email_history_management'],
)
def get_all__history(date_from: str, date_to: str = ...):
    """
    Get all History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/inbound', tags=['sms_history_management', 'sms_automation_rules_management']
)
def get_all__inbound__s_m_s____pull():
    """
    Get all Inbound SMS - Pull
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms/inbound', tags=['sms_automation_rules_management', 'sms_history_management']
)
def add_a__test__inbound__s_m_s(body: SmsInboundPostRequest = None):
    """
    Add a Test Inbound SMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sms/inbound-read',
    tags=[
        'sms_automation_rules_management',
        'sms_history_management',
        'sms_receipt_tracking',
    ],
)
def mark_all__inbound__s_m_s_as_read(body: SmsInboundReadPutRequest = None):
    """
    Mark all Inbound SMS as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sms/inbound-read/{message_id}',
    tags=[
        'sms_automation_rules_management',
        'sms_history_management',
        'sms_receipt_tracking',
    ],
)
def mark_a_specific__inbound__s_m_s_as_read(message_id: str):
    """
    Mark a specific Inbound SMS as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/inbound/{outbound_message_id}',
    tags=['sms_receipt_tracking', 'sms_history_management'],
)
def get__specific__inbound____pull(outbound_message_id: str):
    """
    Get Specific Inbound - Pull
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms/price',
    tags=['sms_automation_rules_management', 'pricing_calculations_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_sms_price(body: SmsPricePostRequest = None):
    """
    Calculate Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sms/receipts', tags=['sms_receipt_tracking', 'delivery_management_issues'])
def get_sms_receipts():
    """
    Get all Delivery Receipts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms/receipts', tags=['sms_receipt_tracking', 'sms_automation_rules_management']
)
def post_sms_receipts(body: SmsReceiptsPostRequest = None):
    """
    Add a Test Delivery Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sms/receipts-read',
    tags=['sms_automation_rules_management', 'sms_receipt_tracking'],
)
def mark__delivery__receipts_as_read(body: SmsReceiptsReadPutRequest = None):
    """
    Mark Delivery Receipts as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/receipts/{message_id}',
    tags=['sms_receipt_tracking', 'delivery_management_issues'],
)
def get_a__specific__delivery__receipt(message_id: str):
    """
    Get a Specific Delivery Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms/send',
    description=""" You can post **up to 1000 messages** with each API call. """,
    tags=['sms_sending_operations_management', 'sms_campaigns_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def send_an__s_m_s(body: SmsSendPostRequest = None):
    """
    Send an SMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sms/templates',
    description=""" Get list of templates. """,
    tags=['email_template_handling'],
)
def list_of__templates():
    """
    List of Templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sms/templates',
    description=""" Create new template. """,
    tags=['sms_automation_rules_management', 'template_management_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_a__template(body: SmsTemplatesPostRequest = None):
    """
    Create a Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sms/templates/{template_id}',
    tags=['email_template_handling', 'template_management_operations'],
)
def delete_a__template(template_id: str):
    """
    Delete a Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sms/templates/{template_id}',
    tags=['sms_automation_rules_management', 'template_management_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_a__template(template_id: str, body: SmsTemplatesTemplateIdPutRequest = None):
    """
    Update a Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/sms/{message_id}/cancel', tags=['scheduled_messages_management'])
def cancel_a__scheduled__message(message_id: str):
    """
    Cancel a Scheduled Message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/statistics/sms',
    tags=['sms_statistics_retrieval', 'sms_automation_rules_management'],
)
def get__s_m_s__statistics():
    """
    Get SMS Statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/statistics/voice', tags=['voice_statistics_retrieval'])
def get__voice__statistics():
    """
    Get Voice Statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/subaccounts', tags=['subaccount_handling', 'account_management'])
def get_all__subaccounts():
    """
    Get all Subaccounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/subaccounts',
    tags=['account_management', 'subaccount_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_a_new_subaccount(body: SubaccountsPostRequest = None):
    """
    Create a new subaccount
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/subaccounts/{subaccount_id}', tags=['account_management', 'subaccount_handling']
)
def delete_a_specific_subaccount(subaccount_id: float):
    """
    Delete a specific subaccount
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subaccounts/{subaccount_id}', tags=['subaccount_handling', 'account_management']
)
def get_a_specific_subaccount(subaccount_id: str):
    """
    Get a specific subaccount
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/subaccounts/{subaccount_id}',
    tags=['account_management', 'subaccount_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_a_specific_subaccount(
    subaccount_id: float, body: SubaccountsSubaccountIdPutRequest = None
):
    """
    Update a specific subaccount
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/subaccounts/{subaccount_id}/regen-api-key',
    tags=['subaccount_handling', 'account_management'],
)
def regenerate__a_p_i__key(subaccount_id: float):
    """
    Regenerate API Key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/timezones',
    description=""" Get supported list of timezones. """,
    tags=['timezones_information'],
)
def get__timezones():
    """
    Get Timezones
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/uploads?convert={convert}', tags=['file_upload_management'])
def upload_a_file(body: UploadsConvertConvertPostRequest = None):
    """
    Upload a file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice/cancel-all',
    tags=['voice_rules_management', 'voice_call_operations_management'],
)
def cancel_all__voice__calls():
    """
    Cancel all Voice Calls
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/voice/history/export?filename={filename}', tags=['voice_history_handling'])
def export__voice__history(filename: str):
    """
    Export Voice History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice/history?date_from={date_from}&date_to={date_to}',
    tags=['voice_history_handling', 'voice_statistics_retrieval'],
)
def get__voice__history(date_from: str, date_to: str = ...):
    """
    Get Voice History
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice/lang',
    tags=[
        'voice_rules_management',
        'voice_statistics_retrieval',
        'voice_history_handling',
        'voice_pricing_management',
        'voice_call_operations_management',
    ],
)
def voice__languages():
    """
    Voice Languages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice/price',
    tags=['voice_pricing_management', 'pricing_calculations_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_voice_price(body: VoicePricePostRequest = None):
    """
    Calculate Price
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice/receipts',
    tags=[
        'voice_rules_management',
        'voice_call_operations_management',
        'voice_history_handling',
    ],
)
def get__voice_receipts():
    """
    Get Voice receipts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice/receipts',
    tags=[
        'voice_rules_management',
        'voice_call_operations_management',
        'delivery_management_issues',
    ],
)
def post_voice_receipts(body: VoiceReceiptsPostRequest = None):
    """
    Add a Test Delivery Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice/receipts-read?date_before={date_before}',
    tags=[
        'voice_rules_management',
        'voice_call_operations_management',
        'voice_history_handling',
    ],
)
def marked__voice__receipts_as__read(date_before: float):
    """
    Marked Voice Receipts as Read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/voice/receipts/{message_id}',
    tags=[
        'voice_rules_management',
        'voice_history_handling',
        'voice_call_operations_management',
    ],
)
def get__specific__voice__receipt(message_id: str):
    """
    Get Specific Voice Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice/send',
    description=""" You can post **up to 1000 messages** with each API call.

We support some SSML tags allowing custom breaks or pauses to be entered, and the readout rate to be altered. [More info](https://help.clicksend.com/voice/how-to-adjust-tts-voice-calls). """,
    tags=[
        'voice_call_operations_management',
        'voice_statistics_retrieval',
        'voice_history_handling',
        'voice_pricing_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def send_a__voice__call(body: VoiceSendPostRequest = None):
    """
    Send a Voice Call
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/voice/{message_id}/cancel',
    tags=['voice_call_operations_management', 'voice_rules_management'],
)
def cancel_a__specific__voice__call(message_id: str):
    """
    Cancel a Specific Voice Call
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
